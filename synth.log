Running yosys for verilog parsing and synthesis

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2015  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.5+ (git sha1 f13e387, gcc 5.3.1-8ubuntu2 -O2 -fstack-protector-strong -fPIC -Os)


-- Executing script file `mux.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend.
Parsing Verilog input from `mux.v' to AST representation.
Generating RTLIL representation for module `\mux'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \mux

3.1.2. Analyzing design hierarchy..
Top module:  \mux
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\mux.$proc$mux.v:16$1'.
  creating decoder for signal `$0\out[0:0]'.

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\mux.\out' using process `\mux.$proc$mux.v:16$1'.
  created $dff cell `$procdff$5' with positive edge clock.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `mux.$proc$mux.v:16$1'.
Cleaned up 0 empty switches.

3.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.4. Executing CHECK pass (checking for obvious problems).
checking module mux..
found and reported 0 problems.

3.5. Executing OPT pass (performing simple optimizations).

3.5.1. Executing OPT_CONST pass (perform const folding).

3.5.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$mux.v:17$4 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.5.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.5.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.5.8. Executing OPT_CONST pass (perform const folding).

3.5.9. Finished OPT passes. (There is nothing left to do.)

3.6. Executing WREDUCE pass (reducing word size of cells).

3.7. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module mux:
  created 0 $alu and 0 $macc cells.

3.8. Executing SHARE pass (SAT-based resource sharing).

3.9. Executing OPT pass (performing simple optimizations).

3.9.1. Executing OPT_CONST pass (perform const folding).

3.9.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$mux.v:17$4 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.9.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.9.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.9.8. Executing OPT_CONST pass (perform const folding).

3.9.9. Finished OPT passes. (There is nothing left to do.)

3.10. Executing FSM pass (extract and optimize FSM).

3.10.1. Executing FSM_DETECT pass (finding FSMs in design).

3.10.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.10.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.10.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.10.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.10.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.10.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.10.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.11. Executing OPT pass (performing simple optimizations).

3.11.1. Executing OPT_CONST pass (perform const folding).

3.11.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.11.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.11.5. Finished fast OPT passes.

3.12. Executing MEMORY pass.

3.12.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.12.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.12.3. Executing MEMORY_SHARE pass (consolidating $memrc/$memwr cells).

3.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.12.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_CONST pass (perform const folding).

3.14.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.14.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.14.5. Finished fast OPT passes.

3.15. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.16. Executing OPT pass (performing simple optimizations).

3.16.1. Executing OPT_CONST pass (perform const folding).

3.16.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \mux..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
    Root of a mux tree: $ternary$mux.v:17$4 (pure)
  Analyzing evaluation results.
Removed 0 multiplexer ports.

3.16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mux.
Performed a total of 0 changes.

3.16.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.16.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.16.8. Executing OPT_CONST pass (perform const folding).

3.16.9. Finished OPT passes. (There is nothing left to do.)

3.17. Executing TECHMAP pass (map to technology primitives).

3.17.1. Executing Verilog-2005 frontend.
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.
Mapping mux.$ternary$mux.v:17$2 ($mux) with simplemap.
Mapping mux.$ternary$mux.v:17$3 ($mux) with simplemap.
Mapping mux.$ternary$mux.v:17$4 ($mux) with simplemap.
Mapping mux.$procdff$5 ($dff) with simplemap.
No more expansions possible.

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_CONST pass (perform const folding).

3.18.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.18.5. Finished fast OPT passes.

3.19. Executing ABC pass (technology mapping using ABC).

3.19.1. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 9 wires to a netlist network with 6 inputs and 1 outputs.

3.19.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 15 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + retime 
ABC: + map 
ABC: Warning: The network was strashed and balanced before mapping.
ABC: + write_blif <abc-temp-dir>/output.blif 

3.19.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        3
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        1
Removing temp directory.

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_CONST pass (perform const folding).

3.20.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

3.20.3. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

3.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

3.20.5. Finished fast OPT passes.

3.21. Executing HIERARCHY pass (managing design hierarchy).

3.21.1. Analyzing design hierarchy..
Top module:  \mux

3.21.2. Analyzing design hierarchy..
Top module:  \mux
Removed 0 unused modules.

3.22. Printing statistics.

=== mux ===

   Number of wires:                 11
   Number of wire bits:             13
   Number of public wires:           8
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_DFF_P_                        1
     $_MUX_                          3

=== design hierarchy ===

   mux                               1

   Number of wires:                 11
   Number of wire bits:             13
   Number of public wires:           8
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  4
     $_DFF_P_                        1
     $_MUX_                          3

3.23. Executing CHECK pass (checking for obvious problems).
checking module mux..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\mux':
  mapped 1 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_CONST pass (perform const folding).

5.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mux.
Performed a total of 0 changes.

5.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

5.8. Executing OPT_CONST pass (perform const folding).

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\mux' to `<abc-temp-dir>/input.blif'..
Extracted 3 gates and 9 wires to a netlist network with 6 inputs and 1 outputs.

6.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu035/osu035_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.01 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func).  Time =     0.01 sec
ABC: Memory =    0.38 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Error: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:             INVX1 cells:        1
ABC RESULTS:            MUX2X1 cells:        1
ABC RESULTS:            NOR2X1 cells:        1
ABC RESULTS:           OAI21X1 cells:        1
ABC RESULTS:           OAI22X1 cells:        1
ABC RESULTS:        internal signals:        2
ABC RESULTS:           input signals:        6
ABC RESULTS:          output signals:        1
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.
Removed 0 unused cells and 9 unused wires.

8. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port mux.clk: Missing option -inpad.
Don't map input port mux.i1: Missing option -inpad.
Don't map input port mux.i2: Missing option -inpad.
Don't map input port mux.i3: Missing option -inpad.
Don't map input port mux.i4: Missing option -inpad.
Don't map input port mux.lol: Missing option -inpad.
Mapping port mux.out using BUFX2.
Don't map input port mux.sel: Missing option -inpad.

9. Executing OPT pass (performing simple optimizations).

9.1. Executing OPT_CONST pass (perform const folding).

9.2. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizier on module \mux..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \mux.
Performed a total of 0 changes.

9.5. Executing OPT_SHARE pass (detect identical cells).
Finding identical cells in module `\mux'.
Removed a total of 0 cells.

9.6. Executing OPT_RMDFF pass (remove dff with constant values).
Replaced 0 DFF cells.

9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \mux..

9.8. Executing OPT_CONST pass (perform const folding).

9.9. Finished OPT passes. (There is nothing left to do.)

10. Executing BLIF backend.

End of script. Logfile hash: 10fac9d2fa
CPU: user 0.14s system 0.00s, MEM: 34.82 MB total, 8.45 MB resident
Yosys 0.5+ (git sha1 f13e387, gcc 5.3.1-8ubuntu2 -O2 -fstack-protector-strong -fPIC -Os)
Time spent: 34% 1x share (0 sec), 11% 9x opt (0 sec), ...
Cleaning up output syntax
Cleaning Up blif file syntax
Running blifFanout (iterative)

Parsing library "osu035_stdcells"
End of library at line 6636
Lib Read:  Processed 6637 lines.
Top internal fanout is 1 (load 241.719) from node $abc$58$n11,
driven by OAI21X1 with strength 101.851
Top fanout load-to-strength ratio is 0.872201
Top input node fanout is 3 (load 69.5198) from node sel<1>.
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 6    	Out: 6    	+0
	"2" gates	In: 1    	Out: 1    	+0

gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/lsd/Work/Qflow-scripts/synthesis
Files:
   Verilog: /home/lsd/Work/Qflow-scripts/synthesis/mux.rtl.v
   Verilog: /home/lsd/Work/Qflow-scripts/synthesis/mux.rtlnopwr.v
   Spice:   /home/lsd/Work/Qflow-scripts/synthesis/mux.spc

Running blif2Verilog.
Running blif2BSpice.
Synthesis script ended on Seg Jul 3 15:14:22 BRT 2017
Running blif2cel.tcl
1st pass of blif file /home/lsd/Work/Qflow-scripts/synthesis/mux.blif. . .
Reading macros from LEF file. . .
Parsing macro BUFX2:  Ports are:
A -160 -140 1
gnd 0 -1000 1
Y 170 0 1
vdd 0 999 1
Parsing macro DFFPOSX1:  Ports are:
Q 580 -420 1
CLK -500 -280 1
D -450 -111 1
gnd -170 -870 1
vdd -160 770 1
Parsing macro INVX1:  Ports are:
A -80 -540 1
gnd 0 -1000 1
Y 80 0 1
vdd 0 999 1
Parsing macro NOR2X1:  Ports are:
A -160 -540 1
B 160 -61 1
gnd 160 -870 1
Y 0 -300 1
vdd 0 999 1
Parsing macro OAI21X1:  Ports are:
A -160 -330 1
B -80 -140 1
C 160 300 1
gnd 0 -1000 1
Y 50 -100 1
vdd 179 770 1
Parsing macro OAI22X1:  Ports are:
A -240 -330 1
B -160 -140 1
C 320 -261 1
D 160 -140 1
gnd 0 -1000 1
Y 0 -300 1
vdd 320 570 1
Parsing macro MUX2X1:  Ports are:
A 240 -61 1
B -240 -140 1
S -400 -140 1
gnd 280 -730 1
Y 19 500 1
vdd 280 570 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
No mux.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement

twflow version:2.1 date:Mon May 25 21:15:08 EDT 1992
Authors: Bill Swartz, Carl Sechen
         Yale University

syntax version:v1.1 date:Mon May 25 21:11:10 EDT 1992
TimberWolf System Syntax Checker
Authors: Carl Sechen, Kai-Win Lee, Bill Swartz,
         Dahe Chen, and Jimmy Lam
         Yale University

No syntax errors were found

syntax terminated normally with no errors and 0 warning[s]


----------------------------
Total stdcells     :7
Total cell width   :5.60e+03
Total cell height  :1.40e+04
Total cell area    :1.12e+07
Total core area    :1.12e+07
Average cell height:2.00e+03


nocut - replacement for Mincut version:v1.0 date:Mon May 25 21:09:40 EDT 1992
TimberWolf System Floorplan Setup Program
Authors: Carl Sechen, Bill Swartz,
         Yale University

Splitting mux.cel into mux.scel and mux.mcel...
	done!


nocut - replacement for Mincut terminated normally with no errors and 0 warning[s]


TimberWolfMC version:v2.2 date:Mon May 25 21:18:34 EDT 1992
Authors: Carl Sechen, Bill Swartz, Kai-Win Lee
         Dahe Chen, and Jimmy Lam
         Yale University

config version:v1.0 date:Mon May 25 20:57:18 EDT 1992
Row configuration program
    Yale University


config switches:
	Graphics mode on
	config will inherit window



config terminated normally with no errors and 0 warning[s]


TimberWolfMC terminated normally with no errors and 0 warning[s]



TimberWolfSC switches:
	Graphics mode on
	TimberWolfSC will inherit window

TimberWolfSC version:v6.0 date:Mon May 25 21:19:07 EDT 1992
Row-Based Placement and Global Routing Program
Authors: Carl Sechen, Kai-Win Lee, and Bill Swartz,
         Yale University
  0 
  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15 
 16  17  18  19  20  21  22  23  24  25  26  27  28  29  30 
 31  32  33  34  35  36  37  38  39  40  41  42  43  44  45 
 46  47  48  49  50  51  52  53  54  55  56  57  58  59  60 
 61  62  63  64  65  66  67  68  69  70  71  72  73  74  75 
 76  77  78  79  80  81  82  83  84  85  86  87  88  89  90 
 91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 
106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 
121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 
136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 
151 152 153 154 155 156 157 
 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified

 block left edge is at -399
 the longest block length is 5600
 building the steiner trees
 rebuilding the steiner tree

----start doing coarse global routing ------ 
 ITERATION  1

  longest Row is:1   Its length is:5600
 doing feed-through pins assignment
 building the net-tree now !
 set up the global routing grids
 the starting value of tracks =    5
 removing redundant feed-through pins
 the connectivity of all the nets is verified


***********************************************
*ACTUAL* FINAL NUMBER OF ROUTING TRACKS: 5
***********************************************


TimberWolfSC terminated normally with no errors and 0 warning[s]


twflow terminated normally with no errors and 0 warning[s]

Running getfillcell.tcl
Using cell FILL for fill
Running place2def.tcl
Limits: xbot = -750.0 ybot = -530.0 xtop = 5550.0 ytop = 2130.0
Core values: 80.0 100 5680.0 2100
Offsets: 80.0 100
4 routing layers
14 horizontal tracks from -400.0 to 2400.0 step 200 (M1, M3, ...)
41 vertical tracks from -480.0 to 6080.0 step 160.0 (M2, M4, ...)
Done with place2def.tcl
Running blifanno.tcl
Reading DEF file mux.def. . .
Done with blifanno.tcl

Generating RTL verilog and SPICE netlist file in directory
   /home/lsd/Work/Qflow-scripts/synthesis
Files:
   Verilog: /home/lsd/Work/Qflow-scripts/synthesis/mux.rtl.v
   Verilog: /home/lsd/Work/Qflow-scripts/synthesis/mux.rtlnopwr.v
   Spice:   /home/lsd/Work/Qflow-scripts/synthesis/mux.spc

Running blif2Verilog.
Running blif2BSpice.
Running addspacers.tcl
Reading FILL macros from LEF file.
Reading DEF file mux.def. . .
Longest row is width 5680.0
Analysis of DEF file:
Number of components = 7
New number of components = 7
Number of rows = 1
Done with addspacers.tcl
Placement script ended on Seg Jul 3 15:14:28 BRT 2017
-----------------------------------------
Vesta static timing analysis tool
(c) 2013 Tim Edwards, Open Circuit Design
-----------------------------------------

Parsing library "osu035_stdcells"
End of library at line 6636
Parsing module "mux"
Lib Read:  Processed 6637 lines.
Verilog netlist read:  Processed 23 lines.
Number of paths analyzed:  1

Top 1 maximum delay paths:
Path DFFPOSX1_1/CLK to output pin out delay 252.484 ps   Slack = 47.516 ps
Design meets timing requirements.
-----------------------------------------

Number of paths analyzed:  1

Top 1 minimum delay paths:
Path DFFPOSX1_1/CLK to output pin out delay 252.484 ps
Design meets minimum hold timing.
-----------------------------------------

Number of paths analyzed:  7

Top 7 maximum delay paths:
Path input pin sel[1] to DFFPOSX1_1/D delay 265.6 ps
Path input pin i3 to DFFPOSX1_1/D delay 220.81 ps
Path input pin i2 to DFFPOSX1_1/D delay 215.975 ps
Path input pin i4 to DFFPOSX1_1/D delay 209.095 ps
Path input pin i1 to DFFPOSX1_1/D delay 202.476 ps
Path input pin sel[0] to DFFPOSX1_1/D delay 199.238 ps
Path input pin clk to DFFPOSX1_1/CLK delay 0 ps
-----------------------------------------

Number of paths analyzed:  7

Top 7 minimum delay paths:
Path input pin clk to DFFPOSX1_1/CLK delay 0 ps
Path input pin sel[0] to DFFPOSX1_1/D delay 78.7344 ps
Path input pin i1 to DFFPOSX1_1/D delay 172.968 ps
Path input pin i4 to DFFPOSX1_1/D delay 198.501 ps
Path input pin i2 to DFFPOSX1_1/D delay 198.848 ps
Path input pin i3 to DFFPOSX1_1/D delay 210.29 ps
Path input pin sel[1] to DFFPOSX1_1/D delay 212.751 ps
-----------------------------------------

Qrouter detail maze router version 1.3.33
No .cfg file specified, continuing without.
Reading LEF data from file /usr/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 10: Unknown keyword "BUSBITCHARS" in LEF file; ignoring.
LEF Read, Line 11: Unknown keyword "DIVIDERCHAR" in LEF file; ignoring.
LEF Read, Line 16: Unknown keyword "USEMINSPACING" in LEF file; ignoring.
LEF Read, Line 17: Unknown keyword "USEMINSPACING" in LEF file; ignoring.
LEF Read, Line 18: Unknown keyword "CLEARANCEMEASURE" in LEF file; ignoring.
LEF Read, Line 21: Unknown keyword "MANUFACTURINGGRID" in LEF file; ignoring.
LEF Read, Line 51: Unknown keyword "RESISTANCE" in LEF file; ignoring.
LEF Read, Line 52: Unknown keyword "CAPACITANCE" in LEF file; ignoring.
LEF Read, Line 67: Unknown keyword "RESISTANCE" in LEF file; ignoring.
LEF Read, Line 68: Unknown keyword "CAPACITANCE" in LEF file; ignoring.
LEF Read, Line 83: Unknown keyword "RESISTANCE" in LEF file; ignoring.
LEF Read, Line 84: Unknown keyword "CAPACITANCE" in LEF file; ignoring.
LEF Read, Line 99: Unknown keyword "RESISTANCE" in LEF file; ignoring.
LEF Read, Line 100: Unknown keyword "CAPACITANCE" in LEF file; ignoring.
LEF Read, Line 106: Don't know how to parse layer "via1"
LEF Read, Line 107: No layer defined for RECT.
LEF Read, Line 115: Don't know how to parse layer "via2"
LEF Read, Line 116: No layer defined for RECT.
LEF Read, Line 124: Don't know how to parse layer "via3"
LEF Read, Line 125: No layer defined for RECT.
LEF Read, Line 131: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 135: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 136: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 140: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 141: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 142: Don't know how to parse layer "via1"
LEF Read, Line 143: No layer defined for RECT.
LEF Read, Line 147: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 151: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 152: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 156: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 157: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 158: Don't know how to parse layer "via2"
LEF Read, Line 159: No layer defined for RECT.
LEF Read, Line 163: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 167: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 168: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 172: Unknown keyword "OVERHANG" in LEF file; ignoring.
LEF Read, Line 173: Unknown keyword "METALOVERHANG" in LEF file; ignoring.
LEF Read, Line 174: Don't know how to parse layer "via3"
LEF Read, Line 175: No layer defined for RECT.
LEF Read, Line 179: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 186: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 193: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF Read, Line 200: Unknown keyword "GENERATE" in LEF file; ignoring.
LEF file:  Defines site corner (ignored)
LEF file:  Defines site IO (ignored)
LEF file:  Defines site core (ignored)
LEF Read, Line 235: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 244: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 277: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 297: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 345: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 365: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 420: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 443: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 499: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 522: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 556: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 575: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 611: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 632: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 674: Don't know how to parse layer "via1"
LEF Read, Line 700: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 713: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 766: Don't know how to parse layer "via1"
LEF Read, Line 809: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 835: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 908: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 921: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 970: Don't know how to parse layer "via1"
LEF Read, Line 1054: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1068: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1115: Don't know how to parse layer "via1"
LEF Read, Line 1140: Don't know how to parse layer "via1"
LEF Read, Line 1188: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1200: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1235: Don't know how to parse layer "via1"
LEF Read, Line 1258: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1275: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1301: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1318: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1344: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1362: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1389: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1412: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1447: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1466: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1507: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1531: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1565: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1587: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1630: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1651: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1706: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1728: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1771: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1793: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1838: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1859: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1902: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1923: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read, Line 1968: Unknown keyword "SHAPE" in LEF file; ignoring.
LEF Read:  Further errors will not be reported.
LEF read: Processed 3179 lines.
LEF Read: encountered 124 errors total.
Reading DEF data from file mux.def.
Diagnostic: Design name: "mux"
Multiple vertical route layers at different pitches.  Using pitch 1.6 and routing on 1-of-N tracks for larger pitches.
  Processed 7 subcell instances total.
  Processed 10 pins total.
  Processed 16 nets total.
DEF read: Processed 110 lines.
There are 16 nets in this design.
Finished routing net sel<1>
Nets remaining: 15
Finished routing net sel<0>
Nets remaining: 14
Finished routing net $abc$58$n8_1
Nets remaining: 13
Finished routing net i1
Nets remaining: 12
Finished routing net $abc$58$n9
Nets remaining: 11
Finished routing net i3
Nets remaining: 10
Finished routing net i4
Nets remaining: 9
Finished routing net $abc$58$n10
Nets remaining: 8
Finished routing net i2
Nets remaining: 7
Finished routing net $abc$58$n11
Nets remaining: 6
Finished routing net out_FF_INPUT
Nets remaining: 5
Finished routing net $auto$iopadmap.cc:164:execute$64
Nets remaining: 4
Finished routing net out
Nets remaining: 3
Finished routing net clk
Nets remaining: 2

----------------------------------------------
Progress: Stage 1 total routes completed: 17
No failed routes!
----------------------------------------------
----------------------------------------------
Final: No failed routes!
----------------------------------------------
Router script ended on Seg Jul 3 15:14:29 BRT 2017
Running blif2cel.tcl
1st pass of blif file /home/lsd/Work/Qflow-scripts/synthesis/mux.blif. . .
Reading macros from LEF file. . .
Parsing macro BUFX2:  Ports are:
A -160 -140 1
gnd 0 -1000 1
Y 170 0 1
vdd 0 999 1
Parsing macro DFFPOSX1:  Ports are:
Q 580 -420 1
CLK -500 -280 1
D -450 -111 1
gnd -170 -870 1
vdd -160 770 1
Parsing macro INVX1:  Ports are:
A -80 -540 1
gnd 0 -1000 1
Y 80 0 1
vdd 0 999 1
Parsing macro NOR2X1:  Ports are:
A -160 -540 1
B 160 -61 1
gnd 160 -870 1
Y 0 -300 1
vdd 0 999 1
Parsing macro OAI21X1:  Ports are:
A -160 -330 1
B -80 -140 1
C 160 300 1
gnd 0 -1000 1
Y 50 -100 1
vdd 179 770 1
Parsing macro OAI22X1:  Ports are:
A -240 -330 1
B -160 -140 1
C 320 -261 1
D 160 -140 1
gnd 0 -1000 1
Y 0 -300 1
vdd 320 570 1
Parsing macro MUX2X1:  Ports are:
A 240 -61 1
B -240 -140 1
S -400 -140 1
gnd 280 -730 1
Y 19 500 1
vdd 280 570 1
2nd pass of blif file. . .
3rd pass of blif file. . .
Done!
